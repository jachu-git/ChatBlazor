@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@using ChatBlazor.Utils
@using ChatBlazor.Models
@using ChatBlazor.Contexts
@using Microsoft.AspNetCore.Identity
@using Blazored.LocalStorage
@using ChatBlazor.Hubs
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject UserManager<IdentityUser> UserManager
@inject AppDbContext DbContext
@inject IHubContext<ChatHub> HubContext
@inject IHttpContextAccessor HttpContextAccessor

@attribute [Authorize]
@implements IAsyncDisposable

<PageTitle>Home</PageTitle>

<!-- old by the code may be useful :p-->
@* 
<div>
    <input @bind="receiverInput" placeholder="Receiver's username" />
    <input @bind="messageInput" placeholder="Message" />
    <button class="btn btn-primary" @onclick="SendMessage">Send</button>
</div>
 *@
@* <ul>
    @foreach (var message in messages)
    {
        <li>@message.Sender.UserName: @message.Text</li>
    }
</ul> *@


<div class="container-fluid">
    <div class="row">
        <!--   users list for selection    -->
        <div id="ChatUsers" class="col-md-2">
            <h3>Chats</h3>
            @foreach (var user in users)
            {
                <div class="card">
                    <div class="card-body">@user.UserName</div>
                </div>
            }
        </div>





        <!--   interface for messaging     -->
        <div class="col-md-10 d-flex flex-column h-100">
            <div class="flex-grow-1">
                <!-- Your chat messages or other content goes here -->
            </div>

            <div class="mt-auto">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" @bind="messageInput" placeholder="Message" />
                    <!-- remember to set an event -->
                    <button class="btn btn-primary" type="button">Send</button>
                </div>
            </div>
        </div>


    </div>
</div>





















@code {
    private List<IdentityUser> users = new();
    private List<Message> messages = new();
    private string? receiverInput;
    private string? messageInput;
    private MessagesManager? messagesManager;
    private IdentityUser? currentUser;
    private HubConnection? hubConnection;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            currentUser = await UserManager.GetUserAsync(user);
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Login", true);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            await InitializeHubConnection();
            isInitialized = true;
        }
    }

    private async Task InitializeHubConnection()
    {
        if (currentUser != null)
        {
            var cookieValue = HttpContextAccessor.HttpContext?.Request.Cookies[".AspNetCore.Identity.Application"];
            Console.WriteLine($"Cookie value: '{cookieValue}'");

            hubConnection = new HubConnectionBuilder()
                .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"), options =>
                {
                    if (!string.IsNullOrEmpty(cookieValue))
                    {
                        options.Headers.Add("Cookie", $".AspNetCore.Identity.Application={cookieValue}");
                    }
                    else
                    {
                        throw new Exception("No auth cookie found");
                    }
                })
                .WithAutomaticReconnect()
                .Build();
            hubConnection.On<MessageDto>("ReceiveMessage", (message) =>
            {
                // Add the new message to the list
                messages.Add(new Message
                    {
                        SenderId = message.SenderId,
                        Sender = new IdentityUser { UserName = message.SenderName },
                        ReceiverId = message.ReceiverId,
                        Text = message.Text,
                        Timestamp = DateTime.Now // Assuming you want to set the timestamp to now
                    });

                // Notify the component that its state has changed
                InvokeAsync(StateHasChanged);
            });
            try
            {
                await hubConnection.StartAsync();
                //Console.WriteLine("Connected to SignalR Hub");//for debug
            }
            catch (Exception ex)
            {
                throw new Exception("Error while starting signalR connection", ex);
            }

            // Get the list of users
            messagesManager = new MessagesManager(DbContext, HubContext, currentUser, null);
            users = await messagesManager.GetUsers();
            await InvokeAsync(StateHasChanged);
        }
        else
        {
            NavigationManager.NavigateTo("/Account/Login", true);
        }
    }

    private async Task SendMessage()
    {
        if (currentUser is not null && !string.IsNullOrEmpty(receiverInput) && !string.IsNullOrEmpty(messageInput))
        {
            var receiver = await UserManager.FindByNameAsync(receiverInput);
            if (receiver != null)
            {
                messagesManager = new MessagesManager(DbContext, HubContext, currentUser, receiver);
                await messagesManager.SendMessage(messageInput);

                // Clear the message input
                messageInput = string.Empty;

                // Refresh messages
                var chatMessages = await messagesManager.GetMessagesForChat();
                if (chatMessages != null)
                {
                    messages = chatMessages;
                    StateHasChanged();
                }
            }
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}